<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SportStore</name>
    </assembly>
    <members>
        <member name="M:SportStore.Controllers.AuthenticationController.Login(SportStore.Models.Dtos.UserLoginDTO)">
            <summary>
                Login and Request Token
            </summary>
            <param name="credentials"></param>
            <response code="200">User logged in successfully.</response>
            <response code="400">The inputs supplied to the API are invalid!.</response> 
            <response code="default">Default !.</response> 
            <returns>The created <see cref="T:Microsoft.AspNetCore.Mvc.BadRequestResult"/> for the response.</returns>
            <remarks>
            Schema:
            
                {
                    "username": "user01",
                    "password": "user01"
                }
            </remarks>
        </member>
        <member name="M:SportStore.Controllers.AuthenticationController.SignUp(SportStore.Models.Dtos.UserAddDTO)">
            <summary>
            Register new user !..
            </summary>
            <param name="userDTO"></param>
            <response code="201">User created successfully and logged in.</response>
            <response code="400">The inputs supplied to the API are invalid!.</response> 
            <response code="default">Default !.</response> 
            <returns></returns>
            <remarks>
            Schema:
            
                {
                    "username": "user00",
                    "password": "123456",
                    "email": "example@domain.com"
                }
            </remarks>
        </member>
        <member name="M:SportStore.Controllers.v1.CategoryController.GetAllCategoriesAsync">
            <summary>
                Get all categories.
            </summary>
            <response code="200">Return all products.</response>
            <response code="default">Error!!</response>
        </member>
        <member name="M:SportStore.Controllers.v1.CategoryController.GetCatogoryById(System.Guid)">
            <summary>
                Get Category with specific ID.
            </summary>
            <param name="id"></param>
            <response code="200">Return the category with the ID provided.</response>
            <response code="404">Category is not found.</response>
            <response code="default">Error!</response>
        </member>
        <member name="M:SportStore.Controllers.v1.CategoryController.CreateCategory(SportStore.Models.Dtos.CategoryDTO)">
            <summary>
                Update entire category.
            </summary>
            <remarks>
            Schema:
            
                {
                  "name": "string"
                }
            </remarks>
            <param name="categoryDTO"></param>
            <response code="204">Category added successfully.</response>
            <response code="400">Category name is already exist..</response>
            <response code="404">Category with ID provided not found.</response>
            <response code="default">Error!!</response>
        </member>
        <member name="M:SportStore.Controllers.v1.CategoryController.UpdateCategory(System.Guid,SportStore.Models.Dtos.CategoryDTO)">
            <summary>
                Update entire category.
            </summary>
            <remarks>
            Schema:
            
                {
                  "name": "string"
                }
            </remarks>
            <param name="id"></param>
            <param name="categoryDTO"></param>
            <response code="204">Category updated successfully.</response>
            <response code="400">Category name is already exist..</response>
            <response code="404">Category with ID provided not found.</response>
            <response code="default">Error!!</response>
        </member>
        <member name="M:SportStore.Controllers.v1.CategoryController.GetProductsOfCategoryById(System.Guid,SportStore.Models.Dtos.PagingDTO,SportStore.Models.Dtos.SortingDTO,SportStore.Models.Dtos.ProductSearchingDTO)">
            <summary>
                Get products of category by ID.
            </summary>
            <param name="idCategory"></param>
            <param name="paging"></param>
            <param name="sorting"></param>
            <param name="searching"></param>
            <response code="200">Return all products of category by ID provided.</response>
            <response code="404">Category not found or Category with no products.</response>
            <response code="default">Error!!</response>
        </member>
        <member name="M:SportStore.Controllers.v1.ProductsController.GetAllProducts(SportStore.Models.Dtos.PagingDTO,SportStore.Models.Dtos.SortingDTO,SportStore.Models.Dtos.ProductSearchingDTO)">
            <summary>
            Get All Products With Pagination Options.
            </summary>
            <param name="paging"></param>
            <param name="sorting"></param>
            <param name="searching"></param> 
            <response code="200">Return all founded products.</response>
            <response code="404">There are no products with elements provided!.</response> 
            <response code="default">Error!!</response>
        </member>
        <member name="M:SportStore.Controllers.v1.ProductsController.GetAvailableProducts(SportStore.Models.Dtos.PagingDTO,SportStore.Models.Dtos.SortingDTO,SportStore.Models.Dtos.ProductSearchingDTO)">
            <summary>
                Get available (quantity > 0) products with pagination options.
            </summary>
            <param name="paging"></param>
            <param name="sorting"></param>
            <param name="searching"></param> 
            <response code="200">User logged in successfully.</response>
            <response code="404">There are no products with elements provided!.</response> 
            <response code="default">Error !.</response> 
        </member>
        <member name="M:SportStore.Controllers.v1.ProductsController.GetProductById(System.Guid)">
            <summary>
                Get a product by ID.
            </summary>
            <param name="id"></param>
            <response code="200">Returns the product with id provided</response>
            <response code="400">The product details is invalid.</response>
            <response code="404">The product not found</response>
            <response code="default">Error!.</response>
        </member>
        <member name="M:SportStore.Controllers.v1.ProductsController.CreateProduct(SportStore.Models.Dtos.ProductDTO)">
            <summary>
             Create new product. 
            </summary>
            <remarks>
            Schema:
            
                {
                  "sku": "string",
                  "name": "string",
                  "descriptio": "string",
                  "price": 0,
                  "quantity": 0,
                  "categoryId": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                }
            </remarks>
            <response code="201"> Product created successfully!. </response>
            <response code="400"> The product details is invalid!.</response>
            <response code="401"> Unauthorized: Should login to call this endpoint!.</response>
            <response code="default"> Error!.</response>
        </member>
        <member name="M:SportStore.Controllers.v1.ProductsController.FullUpdateProductAsync(System.Guid,SportStore.Models.Dtos.ProductDTO)">
            <summary>
                Update whole product with specific ID
            </summary>
            <remarks>
            Schema:
            
                {
                  "sku": "string",
                  "name": "string",
                  "descriptio": "string",
                  "price": 0,
                  "quantity": 2147483647,
                  "categoryId": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                }
            </remarks>
            <param name="id"></param>
            <param name="productDTO"></param>
            <response code="204">Product updated successfully.</response>
            <response code="400">The product details is invalid.</response>
            <response code="404">The product not found.</response>
            <response code="default">Error!.</response>
        </member>
        <member name="M:SportStore.Controllers.v1.ProductsController.PartialUpdateProductAsync(System.Guid,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{SportStore.Models.Entities.Product})">
            <summary>
                Update product partially.
            </summary>
            <remarks>
            Simpe Schema
                
                [
                 {
                   "op": "replace",
                   "path": "sku",
                   "value": "test value"
                 }
                ] 
            </remarks>
            <param name="id"></param>
            <param name="productPatch"></param>
            <response code="204">Product updated successfully.</response>
            <response code="400">The product details is invalid.</response>
            <response code="404">The product not found.</response>
            <response code="default">Error!.</response>
        </member>
        <member name="M:SportStore.Controllers.v1.ProductsController.DeleteProductAsync(System.Guid)">
            <summary>
            Delete a single product by ID
            </summary>
            <param name="id"></param>
            <response code="200">Product deleted successfully.</response>
            <response code="404">The product not found.</response>
            <response code="default">Error!.</response>
        </member>
        <member name="M:SportStore.Controllers.v1.ProductsController.DeleteMultiple(System.Guid[])">
            <summary>
            Delete multiple products by IDs.
            </summary>
            <param name="ids"></param>
            <responce code="200">Products deleted successfully.</responce>
            <responce code="404">A product does not exist with prevant deleting the exsiting ones.</responce>
            <responce code="default">Error!!</responce>
            <returns>List of deleted products.</returns>
        </member>
        <member name="M:SportStore.Controllers.v2.ProductsController.GetAllProducts(SportStore.Models.Dtos.PagingDTO,SportStore.Models.Dtos.SortingDTO,SportStore.Models.Dtos.ProductSearchingDTO)">
            <summary>
            Get All Products With Pagination Options
            </summary>
            <param name="paging"></param>
            <param name="sorting"></param>
            <param name="searching"></param>
            <returns></returns>
        </member>
    </members>
</doc>
